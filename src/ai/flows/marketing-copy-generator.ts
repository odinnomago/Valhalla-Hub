'use server';

/**
 * @fileOverview A marketing copy generation AI agent.
 *
 * - generateMarketingCopy - A function that handles the marketing copy generation process.
 * - GenerateMarketingCopyInput - The input type for the generateMarketingCopy function.
 * - GenerateMarketingCopyOutput - The return type for the generateMarketingCopy function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateMarketingCopyInputSchema = z.object({
  musicAttributes: z
    .string()
    .describe('The attributes of the music, such as genre, mood, and style.'),
  targetAudience: z
    .string()
    .describe('The target audience for the marketing copy.'),
  promotionGoal: z
    .string()
    .describe('The goal of the promotion, such as increasing streams or promoting a new release.'),
});
export type GenerateMarketingCopyInput = z.infer<typeof GenerateMarketingCopyInputSchema>;

const GenerateMarketingCopyOutputSchema = z.object({
  marketingCopyOptions: z
    .array(z.string())
    .describe('An array of marketing copy options generated by the AI.'),
});
export type GenerateMarketingCopyOutput = z.infer<typeof GenerateMarketingCopyOutputSchema>;

export async function generateMarketingCopy(
  input: GenerateMarketingCopyInput
): Promise<GenerateMarketingCopyOutput> {
  return generateMarketingCopyFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateMarketingCopyPrompt',
  input: {schema: GenerateMarketingCopyInputSchema},
  output: {schema: GenerateMarketingCopyOutputSchema},
  prompt: `You are a marketing expert in the music industry.

You will generate multiple marketing copy options based on the music attributes, target audience, and promotion goal.

Music Attributes: {{{musicAttributes}}}
Target Audience: {{{targetAudience}}}
Promotion Goal: {{{promotionGoal}}}

Generate at least 3 marketing copy options.`,
});

const generateMarketingCopyFlow = ai.defineFlow(
  {
    name: 'generateMarketingCopyFlow',
    inputSchema: GenerateMarketingCopyInputSchema,
    outputSchema: GenerateMarketingCopyOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
